const axios = require('axios');

async function createNewRepo(accessToken, repoName) {
    try {
        // Step 1: Define the API endpoint URL
        const apiUrl = 'https://api.github.com/user/repos';

        const requestBody = {
            name: repoName,
            private: false,
            description: 'This business website was automatically generated by GoStarterAI - your all-in-one business launchpad!'
        };
        const requestHeaders = {
            'Authorization': `token ${accessToken}`,
            'Content-Type': 'application/json'
        };
        const response = await axios.post(apiUrl, requestBody, { headers: requestHeaders });

        // Step 5: Check the response and return the new repository's URL
        if (response.status === 201) {
            console.log(`Repository '${repoName}' created successfully.`);
            return {
                success: true,
                html_url: response.data.html_url,
                full_name: response.data.full_name
            };
        } else {
            // Handle unexpected status codes
            console.error(`Error creating repository. Status code: ${response.status}`);
            return { success: false, error: 'Unexpected status code from GitHub API.' };
        }

    } catch (error) {
        console.error("Error creating new repository:", error.response?.data?.message || error.message);
        return { success: false, error: error.response?.data?.message || 'An unknown error occurred.' };
    }
}


exports.handler = async (event, context) => {
    const tempCode = event.queryStringParameters.code;

    if (!tempCode) {
        return {
            statusCode: 400,
            body: 'Error: Authorization code not found.'
        };
    }

    try {
        const response = await axios.post(
            'https://github.com/login/oauth/access_token',
            {
                client_id: process.env.GITHUB_CLIENT_ID,
                client_secret: process.env.GITHUB_CLIENT_SECRET,
                code: tempCode
            },
            {
                // This header tells GitHub we want a JSON response
                headers: { 'Accept': 'application/json' }
            }
        );

        //Extract the permanent access token from the response
        const accessToken = response.data.access_token;

        if (!accessToken) {
            return {
                statusCode: 400,
                body: 'Error: Access token not found in response.'
            };
        }
        createNewRepo(accessToken,"TEST-REPO-GOSTARTER-AI")
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Successfully received access token!", accessToken: accessToken })
        };
    } catch (error) {
        console.error("Error exchanging code for token:", error);
        return {
            statusCode: 500,
            body: 'Internal Server Error'
        };
    }
};
