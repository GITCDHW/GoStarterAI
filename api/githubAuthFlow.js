//import required modules
import axios from 'axios';
import admin from 'firebase-admin';

const serviceAccount = {
  "type": "service_account",
  "project_id": "gostarterai",
  "private_key": process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  "client_email": "firebase-adminsdk-fbsvc@gostarterai.iam.gserviceaccount.com",
  "private_key_id": process.env.FIREBASE_PRIVATE_KEY_ID,
  "client_id": process.env.FIREBASE_CLIENT_ID,
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40gostarterai.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
};

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://gostarterai-default-rtdb.firebaseio.com",
  });
}

const db = admin.database();

/**
 * A utility function to make a request to GitHub to create a new repository.
 * @param {string} accessToken - The GitHub access token for the authenticated user.
 * @param {string} repoName - The name of the new repository.
 * @returns {Promise<object>} An object containing the success status and the new repo's URL or an error message.
 */
const createNewRepo = async (accessToken, repoName) => {
  try {
    const apiUrl = 'https://api.github.com/user/repos';
    const requestBody = {
      name: repoName,
      private: false,
      description: 'This business website was automatically generated by GoStarterAI - your all-in-one business launchpad!',
      auto_init:true
    };
    const requestHeaders = {
      'Authorization': `token ${accessToken}`,
      'Content-Type': 'application/json'
    };
    
    const response = await axios.post(apiUrl, requestBody, { headers: requestHeaders });
    
    if (response.status === 201) {
      console.log(`Repository '${repoName}' created successfully.`);
      return {
        success: true,
        html_url: response.data.html_url,
        full_name: response.data.full_name,
      };
    } else {
      console.error(`Error creating repository. Status code: ${response.status}`);
      return { success: false, error: 'Unexpected status code from GitHub API.' };
    }
    
  } catch (error) {
    console.error('Error creating new repository:', error.response?.data?.message || error.message);
    return { success: false, error: error.response?.data?.message || 'An unknown error occurred.' };
  }
}

/**
 * Pushes HTML and GitHub Actions workflow files to a new repository
 * using the GitHub Git Data API.
 *
 * @param {string} accessToken - The GitHub access token.
 * @param {string} repoOwner - The owner of the repository.
 * @param {string} repoName - The name of the repository.
 * @param {string} websiteCode - The HTML content to be pushed.
 * @returns {Promise<object>} A success status or an error message.
 */
const pushCodeToRepo = async (accessToken, repoOwner, repoName, websiteCode) => {
  const headers = {
    'Authorization': `token ${accessToken}`,
    'Accept': 'application/vnd.github.com+json',
  };
  const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/git/`;

  const workflowContent = `name: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Pages\n        id: pages\n        uses: actions/configure-pages@v3\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: './'\n\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v1`;

  let latestCommitSha;
  let attempts = 0;
  const maxAttempts = 10; // Increased attempts to be extra safe

  // 1. Wait for the `main` branch to exist
  while (attempts < maxAttempts) {
    try {
      const response = await axios.get(`${apiUrl}refs/heads/main`, { headers });
      if (response.status === 200) {
        latestCommitSha = response.data.object.sha;
        console.log('Main branch found. Latest commit SHA:', latestCommitSha);
        break; // Success, exit the loop
      }
    } catch (error) {
      const isNotFound = error.response && error.response.status === 404;
      if (isNotFound) {
        attempts++;
        const delay = Math.pow(2, attempts) * 1000;
        console.warn(`Attempt ${attempts} of ${maxAttempts}: Main branch not found yet. Retrying in ${delay / 1000}s...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        // If it's a different error, stop retrying
        console.error('An unexpected error occurred while checking for the main branch:', error.response?.data || error.message);
        return { success: false, error: 'Failed to find initial commit due to an unexpected error.' };
      }
    }
  }

  if (!latestCommitSha) {
    console.error('Could not find initial commit SHA after multiple retries.');
    return { success: false, error: 'Could not find initial commit SHA after multiple retries.' };
  }

  try {
    // 2. Create a new tree with the two files
    const { data: { sha: newTreeSha } } = await axios.post(`${apiUrl}trees`, {
      base_tree: latestCommitSha,
      tree: [
        {
          path: 'index.html',
          mode: '100644', // File blob
          type: 'blob',
          content: websiteCode,
        },
        {
          path: '.github/workflows/deploy.yml',
          mode: '100644', // File blob
          type: 'blob',
          content: workflowContent,
        }
      ],
    }, { headers });

    // 3. Create a new commit referencing the new tree
    const { data: { sha: newCommitSha } } = await axios.post(`${apiUrl}commits`, {
      message: 'Initial commit: Add website code and deploy workflow',
      tree: newTreeSha,
      parents: [latestCommitSha],
    }, { headers });
    
    // 4. Update the main branch to point to the new commit
    await axios.patch(`${apiUrl}refs/heads/main`, {
      sha: newCommitSha,
    }, { headers });

    console.log("Code and workflow pushed successfully.");
    return { success: true };

  } catch (error) {
    const errorMessage = error.response?.data?.message || error.message;
    console.error(`Error pushing code to repository: ${errorMessage}`, error.response?.data);
    return { success: false, error: errorMessage };
  }
};

// Main handler for the Cloud Function.
export default async function handler(req, res) {
  if (req.method !== "GET") {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }
  
  const { code, state } = req.query;
  
  if (!code || !state) {
    return res.status(400).json({ error: 'Temporary code or state is missing.' });
  }
  
  const stateRef = db.ref(`oauth_states/${state}`);
  const stateSnapshot = await stateRef.once('value');
  
  if (!stateSnapshot.exists()) {
    return res.status(400).json({ error: 'Invalid or expired state parameter.' });
  }
  
  const { userId, businessId, idToken } = stateSnapshot.val();
  await stateRef.remove();
  
  let decodedToken;
  try {
    decodedToken = await admin.auth().verifyIdToken(idToken);
  } catch (error) {
    console.error('Error verifying Firebase ID token:', error);
    return res.status(401).json({ error: 'Unauthorized: Invalid Firebase ID token.' });
  }
  
  const authenticatedUid = decodedToken.uid;
  
  if (authenticatedUid !== userId) {
    return res.status(403).json({ error: 'Forbidden: Session user mismatch. Potential CSRF attack.' });
  }
  
  const businessRef = db.ref(`users/${userId}/businesses/${businessId}`);
  const businessSnapshot = await businessRef.once('value');
  
  if (!businessSnapshot.exists()) {
    return res.status(404).json({ error: 'Business not found.' });
  }
  
  const businessData = businessSnapshot.val();
  const repoName = businessData.businessName.toLowerCase().replace(/\s+/g, '-');
  
  const CLIENT_ID = process.env.GITHUB_CLIENT_ID;
  const CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET;
  const GITHUB_TOKEN_ENDPOINT = 'https://github.com/login/oauth/access_token';
  
  let accessToken;
  try {
    const response = await fetch(GITHUB_TOKEN_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET,
        code: code,
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('GitHub token exchange failed:', errorData);
      return res.status(response.status).json(errorData);
    }
    
    const data = await response.json();
    accessToken = data.access_token;
    
    if (!accessToken) {
      return res.status(500).json({ error: 'Access token not found in response.' });
    }
    
  } catch (error) {
    console.error('Error during GitHub OAuth token exchange:', error);
    return res.status(500).json({ error: 'Internal Server Error during token exchange.' });
  }
  
  // Now that we have the access token, we can proceed with creating the repo.
  const repoCreationResult = await createNewRepo(accessToken, repoName);
  
  if (!repoCreationResult.success) {
    console.error('Failed to create repository:', repoCreationResult.error);
    return res.status(500).json({ error: repoCreationResult.error });
  }
  
  // Use a reliable retry mechanism for pushing code
  const owner = repoCreationResult.full_name.split("/")[0];
  let pushResult = { success: false, error: 'Max retry attempts reached.' };
  let attempts = 0;
  const maxAttempts = 5;
  
  while (attempts < maxAttempts) {
    pushResult = await pushCodeToRepo(accessToken, owner, repoName, businessData.websiteCode);
    if (pushResult.success) {
      break; // Success, exit the loop
    } else {
      attempts++;
      const delay = Math.pow(2, attempts) * 1000; // Exponential backoff
      console.warn(`Attempt ${attempts} failed to push code. Retrying in ${delay / 1000} seconds...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  // If the loop finished without success, return the final error.
  if (!pushResult.success) {
    console.error('Failed to push code to repository after multiple attempts:', pushResult.error);
    return res.status(500).json({ error: `Repository created, but code push failed after multiple retries: ${pushResult.error}` });
  }
  
  // If we reach here, the push was successful.
  await businessRef.update({
    isHosted: true,
    hostedUrl: `https://${owner}.github.io/${repoName}`,
  });
  
  return res.redirect(`https://go-starter-ai.vercel.app/dashboard.html?id=${businessId}`);
}