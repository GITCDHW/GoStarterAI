//import required modules
import axios from 'axios';
import admin from 'firebase-admin';

const serviceAccount = {
    "type": "service_account",
    "project_id": "gostarterai",
    "private_key": process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    "client_email": "firebase-adminsdk-fbsvc@gostarterai.iam.gserviceaccount.com",
    "private_key_id": process.env.FIREBASE_PRIVATE_KEY_ID, 
    "client_id": process.env.FIREBASE_CLIENT_ID,
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40gostarterai.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
};
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        databaseURL: "https://gostarterai-default-rtdb.firebaseio.com",
    });
}

const db = admin.database()
/**
 * A utility function to make a request to GitHub to create a new repository.
 * @param {string} accessToken - The GitHub access token for the authenticated user.
 * @param {string} repoName - The name of the new repository.
 * @returns {Promise<object>} An object containing the success status and the new repo's URL or an error message.
 */
const createNewRepo = async (accessToken, repoName) => {
    try {
        const apiUrl = 'https://api.github.com/user/repos';
        const requestBody = {
            name: repoName,
            private: false,
            description: 'This business website was automatically generated by GoStarterAI - your all-in-one business launchpad!',
        };
        const requestHeaders = {
            'Authorization': `token ${accessToken}`,
            'Content-Type': 'application/json',
        };

        const response = await axios.post(apiUrl, requestBody, { headers: requestHeaders });

        if (response.status === 201) {
            console.log(`Repository '${repoName}' created successfully.`);
            return {
                success: true,
                html_url: response.data.html_url,
                full_name: response.data.full_name,
            };
        } else {
            console.error(`Error creating repository. Status code: ${response.status}`);
            return { success: false, error: 'Unexpected status code from GitHub API.' };
        }
    } catch (error) {
        console.error('Error creating new repository:', error.response?.data?.message || error.message);
        return { success: false, error: error.response?.data?.message || 'An unknown error occurred.' };
    }
};

// Main handler for the Cloud Function.
// pages/api/github-oauth.js

export default async function handler(req, res) {
  // Only allow POST requests for security
  if (req.method !== "POST" && req.method !== "GET") {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // Get the temporary code from the request body
  const { code,id,user } = req.query;
  const currentBusinessRef = db.ref(`users/${user}/businesses/${id}`)
  const businessRef = db.ref(`users/${user}/businesses/${id}`);
  
    const businessSnapshot = await businessRef.once('value');
    if (!businessSnapshot.exists()) {
      return res.status(404).json({ error: 'Business not found.' });
    }
    const businessData = businessSnapshot.val();
    const repoName = businessData.businessName.toLowerCase().replace(/\s+/g, '-');
  // Basic validation to ensure the code exists
  if (!code) {
    return res.status(400).json({ error: 'Temporary code is missing.' });
  }

  // Retrieve environment variables for security
  const CLIENT_ID = process.env.GITHUB_CLIENT_ID;
  const CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET;
  const GITHUB_TOKEN_ENDPOINT = 'https://github.com/login/oauth/access_token';

  try {
    const response = await fetch(GITHUB_TOKEN_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json', // This tells GitHub to return a JSON response
      },
      body: JSON.stringify({
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET,
        code: code,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('GitHub token exchange failed:', errorData);
      return res.status(response.status).json(errorData);
    }

    const data = await response.json();

    // The permanent token is in the 'access_token' field
    const accessToken = data.access_token;
    
    if (!accessToken) {
      return res.status(500).json({ error: 'Access token not found in response.' });
    }
    const repoCreationResult = await createNewRepo(accessToken, repoName);

if (repoCreationResult.success) {
    // Step 4: Update the business record in Firebase with hosting info
    await businessRef.update({
        isHosted: true,
        hostedUrl: repoCreationResult.html_url,
    });
    // Step 5: Redirect the user to a success page
    return res.redirect(`https://go-starter-ai.vercel.app/dashboard.html?id=${id}`);
} else {
    console.error('Failed to create repository:', repoCreationResult.error);
    return res.status(500).json({ error: repoCreationResult.error });
}

  } catch (error) {
    console.error('Error during GitHub OAuth token exchange:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}
