import axios from 'axios';
/**
 * A utility function to make a request to GitHub to create a new repository.
 * @param {string} accessToken - The GitHub access token for the authenticated user.
 * @param {string} repoName - The name of the new repository.
 * @returns {Promise<object>} An object containing the success status and the new repo's URL or an error message.
 */
const createNewRepo = async (accessToken, repoName) => {
    try {
        const apiUrl = 'https://api.github.com/user/repos';
        const requestBody = {
            name: repoName,
            private: false,
            description: 'This business website was automatically generated by GoStarterAI - your all-in-one business launchpad!',
        };
        const requestHeaders = {
            'Authorization': `token ${accessToken}`,
            'Content-Type': 'application/json',
        };

        const response = await axios.post(apiUrl, requestBody, { headers: requestHeaders });

        if (response.status === 201) {
            console.log(`Repository '${repoName}' created successfully.`);
            return {
                success: true,
                html_url: response.data.html_url,
                full_name: response.data.full_name,
            };
        } else {
            console.error(`Error creating repository. Status code: ${response.status}`);
            return { success: false, error: 'Unexpected status code from GitHub API.' };
        }
    } catch (error) {
        console.error('Error creating new repository:', error.response?.data?.message || error.message);
        return { success: false, error: error.response?.data?.message || 'An unknown error occurred.' };
    }
};

// Main handler for the Cloud Function.
export default async function handler(event, res) {
    const tempCode = event.queryStringParameters?.code;
    const id = event.queryStringParameters?.id;
    try {
        const tokenResponse = await axios.post(
            'https://github.com/login/oauth/access_token',
            {
                client_id: process.env.GITHUB_CLIENT_ID,
                client_secret: process.env.GITHUB_CLIENT_SECRET,
                code: tempCode,
                redirect_uri: 'https://go-starter-ai.vercel.app/api/githubAuthFlow',
            },
            {
                headers: { 'Accept': 'application/json' },
            },
        );

        const { access_token: accessToken } = tokenResponse.data;
        if (!accessToken) {
            const redirectUrl = `https://go-starter-ai.vercel.app/error.html?reason=access_token_missing&id=${id}`;
            res.writeHead(302, { Location: redirectUrl });
            res.end();
            return;
        }
        const repoName = 'go-starter-ai-website-test'+Date.now();
        const repoResult = await createNewRepo(accessToken, repoName);

        if (repoResult.success) {
            const successUrl = `https://go-starter-ai.vercel.app/success.html?repo_url=${repoResult.html_url}&full_name=${repoResult.full_name}&id=${id}`;
            res.writeHead(302, { Location: successUrl });
            res.end();
        } else {
            const errorUrl = `https://go-starter-ai.vercel.app/error.html?reason=repo_creation_failed&message=${encodeURIComponent(repoResult.error)}&id=${id}`;
            res.writeHead(302, { Location: errorUrl });
            res.end();
        }

    } catch (error) {
        console.error('Error during authentication or repository creation:');
    if (error.response) {
        // Log the detailed error from GitHub
        console.error('GitHub API Response Status:', error.response.status);
        console.error('GitHub API Response Data:', error.response.data);
    } else {
        console.error('Network Error:', error.message);
    }
        console.error('Error during authentication or repository creation:', error);
        const redirectUrl = `https://go-starter-ai.vercel.app/error.html?reason=internal_server_error&id=${id}`;
        res.writeHead(302, { Location: redirectUrl });
        res.end();
    }
}
