import axios from 'axios';

/**
 * A utility function to make a request to GitHub to create a new repository.
 * @param {string} accessToken - The GitHub access token for the authenticated user.
 * @param {string} repoName - The name of the new repository.
 * @returns {Promise<object>} An object containing the success status and the new repo's URL or an error message.
 */
const createNewRepo = async (accessToken, repoName) => {
    try {
        const apiUrl = 'https://api.github.com/user/repos';
        const requestBody = {
            name: repoName,
            private: false,
            description: 'This business website was automatically generated by GoStarterAI - your all-in-one business launchpad!',
        };
        const requestHeaders = {
            'Authorization': `token ${accessToken}`,
            'Content-Type': 'application/json',
        };

        const response = await axios.post(apiUrl, requestBody, { headers: requestHeaders });

        if (response.status === 201) {
            console.log(`Repository '${repoName}' created successfully.`);
            return {
                success: true,
                html_url: response.data.html_url,
                full_name: response.data.full_name,
            };
        } else {
            console.error(`Error creating repository. Status code: ${response.status}`);
            return { success: false, error: 'Unexpected status code from GitHub API.' };
        }
    } catch (error) {
        console.error('Error creating new repository:', error.response?.data?.message || error.message);
        return { success: false, error: error.response?.data?.message || 'An unknown error occurred.' };
    }
};

// Main handler for the Cloud Function.
export default const handler = async (event) => {
    // Extract the authorization code and state from the query parameters.
    const tempCode = event.queryStringParameters?.code;
    const id = event.queryStringParameters?.id;

    // If no authorization code is present, it's a direct visit or an error from GitHub.
    if (!tempCode) {
        return {
            statusCode: 302,
            headers: {
                Location: 'https://go-starter-ai.vercel.app/error.html?reason=auth_code_missing',
            },
        };
    }

    // You would typically validate the 'state' parameter here against what you stored
    // to prevent CSRF attacks.

    try {
        // Exchange the temporary code for a permanent access token.
        const response = await axios.post(
            'https://github.com/login/oauth/access_token',
            {
                client_id: process.env.GITHUB_CLIENT_ID,
                client_secret: process.env.GITHUB_CLIENT_SECRET,
                code: tempCode,
                // The redirect_uri must match the one you registered with GitHub.
                // It's good practice to include it here for an extra layer of security.
                redirect_uri: 'https://go-starter-ai.vercel.app/api/githubAuthFlow',
            },
            {
                headers: { 'Accept': 'application/json' },
            },
        );

        const { access_token: accessToken } = response.data;

        if (!accessToken) {
            return {
                statusCode: 302,
                headers: {
                    Location: 'https://go-starter-ai.vercel.app/error.html?reason=access_token_missing',
                },
            };
        }

        // Use the access token to create a new repository.
        const repoResult = await createNewRepo(accessToken, 'TEST-REPO-GOSTARTER-AI');

        if (repoResult.success) {
            // On success, redirect the user back to your dashboard with the new repo info.
            return {
                statusCode: 302,
                headers: {
                    Location: `https://go-starter-ai.vercel.app/dashboard.html?id=${id}&repo=${encodeURIComponent(repoResult.full_name)}`,
                },
            };
        } else {
            // On failure, redirect to an error page with specific details.
            return {
                statusCode: 302,
                headers: {
                    Location: `https://go-starter-ai.vercel.app/error.html?reason=repo_creation_failed&details=${encodeURIComponent(repoResult.error)}`,
                },
            };
        }
    } catch (error) {
        console.error('Error during authentication flow:', error);
        return {
            statusCode: 302,
            headers: {
                Location: 'https://go-starter-ai.vercel.app/error.html?reason=internal_server_error',
            },
        };
    }
};
